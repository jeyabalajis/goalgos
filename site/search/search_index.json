{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Go Algos A curated set of algorithms that exploit the power and simplicity of golang Wherever possible, the problem at hand is broken down to sub problems and solved through recursion combined together with parallelism. Build Status : Go Report Card :","title":"Home"},{"location":"#go-algos","text":"A curated set of algorithms that exploit the power and simplicity of golang Wherever possible, the problem at hand is broken down to sub problems and solved through recursion combined together with parallelism. Build Status : Go Report Card :","title":"Go Algos"},{"location":"graph/tree/max-sum-possible-tree/","text":"Maximum Sum Possible in a Tree","title":"Maximum sum possible in a tree"},{"location":"graph/tree/max-sum-possible-tree/#maximum-sum-possible-in-a-tree","text":"","title":"Maximum Sum Possible in a Tree"},{"location":"graph/tree/same-tree/","text":"Same Tree","title":"Same Tree"},{"location":"graph/tree/same-tree/#same-tree","text":"","title":"Same Tree"},{"location":"optimization/network/cheapest-flights-within-k-stops/","text":"Cheapest flights within k stops Problem Link This is a node traversal problem which can be attacked with recursion and parallelism. Keep a common variable for the cheapest cost Traverse nodes recursively and accumulate cost. For each traversal, validate whether the destination is reached and if yes, push to cheapest cost store The cheapest cost store shall accept the path & the cost only if the incoming cost is cheaper than the existing Once all the go routines complete, return the cheapest cost and the path","title":"Cheapest flights within k stops"},{"location":"optimization/network/cheapest-flights-within-k-stops/#cheapest-flights-within-k-stops","text":"Problem Link This is a node traversal problem which can be attacked with recursion and parallelism. Keep a common variable for the cheapest cost Traverse nodes recursively and accumulate cost. For each traversal, validate whether the destination is reached and if yes, push to cheapest cost store The cheapest cost store shall accept the path & the cost only if the incoming cost is cheaper than the existing Once all the go routines complete, return the cheapest cost and the path","title":"Cheapest flights within k stops"},{"location":"optimization/scheduling/schedule-courses/","text":"Schedule Courses","title":"Schedule Courses"},{"location":"optimization/scheduling/schedule-courses/#schedule-courses","text":"","title":"Schedule Courses"},{"location":"string/word-break/break-sentence-by-substr/","text":"Break Sentence by a Sub String","title":"Break Sentence by Sub String"},{"location":"string/word-break/break-sentence-by-substr/#break-sentence-by-a-sub-string","text":"","title":"Break Sentence by a Sub String"}]}